generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  phoneNumber         String?
  phoneNumberVerified Boolean?
  emailVerified       Boolean?
  isAnonymous         Boolean?
  sessions            Session[]
  accounts            Account[]
  orders              Order[]

  @@unique([email, phoneNumber])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Order {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  status    Status

  @@map("order")
}

model Product {
  id      String @id @default(uuid())
  name    String
  price   Float
  category String @default("snacks")
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  @@map("product")
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
}
